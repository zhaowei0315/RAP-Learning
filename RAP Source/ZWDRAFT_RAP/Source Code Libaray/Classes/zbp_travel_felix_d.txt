CLASS lhc_ZR_TRAVEL_FELIX_D DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys REQUEST requested_authorizations FOR zr_travel_felix_d RESULT result.

    METHODS get_global_authorizations FOR GLOBAL AUTHORIZATION
      IMPORTING REQUEST requested_authorizations FOR zr_travel_felix_d RESULT result.

    METHODS precheck_create FOR PRECHECK
      IMPORTING entities FOR CREATE zr_travel_felix_d.

    METHODS precheck_update FOR PRECHECK
      IMPORTING entities FOR UPDATE zr_travel_felix_d.

    METHODS accepttravel FOR MODIFY
      IMPORTING keys FOR ACTION zr_travel_felix_d~accepttravel RESULT result.

    METHODS deductdiscount FOR MODIFY
      IMPORTING keys FOR ACTION zr_travel_felix_d~deductdiscount RESULT result.

    METHODS recalctotalprice FOR MODIFY
      IMPORTING keys FOR ACTION zr_travel_felix_d~recalctotalprice.

    METHODS rejecttravel FOR MODIFY
      IMPORTING keys FOR ACTION zr_travel_felix_d~rejecttravel RESULT result.

    METHODS calctotalprice FOR DETERMINE ON MODIFY
      IMPORTING keys FOR zr_travel_felix_d~calctotalprice.

    METHODS setoverallstatus FOR DETERMINE ON MODIFY
      IMPORTING keys FOR zr_travel_felix_d~setoverallstatus.

    METHODS settravelid FOR DETERMINE ON SAVE
      IMPORTING keys FOR zr_travel_felix_d~settravelid.
    METHODS validateagency FOR VALIDATE ON SAVE
      IMPORTING keys FOR zr_travel_felix_d~validateagency.

    METHODS validatecustomer FOR VALIDATE ON SAVE
      IMPORTING keys FOR zr_travel_felix_d~validatecustomer.

    METHODS validatedates FOR VALIDATE ON SAVE
      IMPORTING keys FOR zr_travel_felix_d~validatedates.
    METHODS activate FOR MODIFY
      IMPORTING keys FOR ACTION zr_travel_felix_d~activate.

    METHODS discard FOR MODIFY
      IMPORTING keys FOR ACTION zr_travel_felix_d~discard.

    METHODS edit FOR MODIFY
      IMPORTING keys FOR ACTION zr_travel_felix_d~edit.

    METHODS resume FOR MODIFY
      IMPORTING keys FOR ACTION zr_travel_felix_d~resume.

ENDCLASS.

CLASS lhc_ZR_TRAVEL_FELIX_D IMPLEMENTATION.

  METHOD get_global_authorizations.
*    IF requested_authorizations-%create = if_abap_behv=>mk-on.
*      AUTHORITY-CHECK OBJECT '/DMO/TRVL'
*        ID '/DMO/CNTRY' DUMMY
*        ID 'ACTVT' FIELD '01'.
*
*      result-%create = COND #( WHEN sy-subrc = 0 THEN if_abap_behv=>auth-allowed ELSE if_abap_behv=>auth-unauthorized ).
*    ENDIF.
*
*    IF requested_authorizations-%update = if_abap_behv=>mk-on.
*      AUTHORITY-CHECK OBJECT '/DMO/TRVL'
*          ID '/DMO/CNTRY' DUMMY
*          ID 'ACTVT' FIELD '02'.
*
*      result-%update = COND #( WHEN sy-subrc = 0 THEN if_abap_behv=>auth-allowed ELSE if_abap_behv=>auth-unauthorized ).
*    ENDIF.
*
*    IF requested_authorizations-%delete = if_abap_behv=>mk-on.
*      AUTHORITY-CHECK OBJECT '/DMO/TRVL'
*          ID '/DMO/CNTRY' DUMMY
*          ID 'ACTVT' FIELD '06'.
*
*      result-%delete = COND #( WHEN sy-subrc = 0 THEN if_abap_behv=>auth-allowed ELSE if_abap_behv=>auth-unauthorized ).
*    ENDIF.

  ENDMETHOD.

  METHOD get_instance_authorizations.

*    READ ENTITIES OF zr_travel_felix_d IN LOCAL MODE
*      ENTITY zr_travel_felix_d
*      FIELDS ( AgencyID )
*      WITH CORRESPONDING #( keys )
*      RESULT DATA(lt_travel)
*      FAILED failed.
*
*    CHECK lt_travel IS NOT INITIAL.
*
*    SELECT
*      FROM /dmo/a_travel_d AS a
*      INNER JOIN /dmo/agency AS b
*      ON a~agency_id = b~agency_id
*      FIELDS a~travel_uuid, a~agency_id, b~country_code
*      FOR ALL ENTRIES IN @lt_travel
*      WHERE a~travel_uuid = @lt_travel-TravelUUID
*      INTO TABLE @DATA(lt_agency_cntry).
*
*    LOOP AT lt_travel ASSIGNING FIELD-SYMBOL(<fs_travel>).
*      READ TABLE lt_agency_cntry ASSIGNING FIELD-SYMBOL(<fs_agency_cntry>) WITH KEY travel_uuid = <fs_travel>-TravelUUID.
*      IF sy-subrc = 0.
*        IF requested_authorizations-%update = if_abap_behv=>mk-on.
*          AUTHORITY-CHECK OBJECT '/DMO/TRVL'
*              ID '/DMO/CNTRY' FIELD <fs_agency_cntry>-country_code
*              ID 'ACTVT' FIELD '02'.
*
*          APPEND VALUE #( traveluuid = <fs_travel>-TravelUUID
*                          %update = COND #( WHEN sy-subrc = 0 THEN if_abap_behv=>auth-allowed ELSE if_abap_behv=>auth-unauthorized ) )
*                 TO result.
*
*          IF sy-subrc <> 0.
*            APPEND VALUE #( %tky = <fs_travel>-%tky
*                            %msg = NEW /dmo/cm_flight_messages(
*                              textid = /dmo/cm_flight_messages=>not_authorized_for_agencyid
*                              agency_id = <fs_travel>-agencyid
*                              severity = if_abap_behv_message=>severity-error
*                            ) ) TO reported-zr_travel_felix_d.
*          ENDIF.
*        ENDIF.
*
*        IF requested_authorizations-%delete = if_abap_behv=>mk-on.
*          AUTHORITY-CHECK OBJECT '/DMO/TRVL'
*              ID '/DMO/CNTRY' DUMMY
*              ID 'ACTVT' FIELD '06'.
*
*          APPEND VALUE #( traveluuid = <fs_travel>-TravelUUID
*                          %delete = COND #( WHEN sy-subrc = 0 THEN if_abap_behv=>auth-allowed ELSE if_abap_behv=>auth-unauthorized ) )
*                 TO result.
*
*          IF sy-subrc <> 0.
*            APPEND VALUE #( %tky = <fs_travel>-%tky
*                            %msg = NEW /dmo/cm_flight_messages(
*                              textid = /dmo/cm_flight_messages=>not_authorized_for_agencyid
*                              agency_id = <fs_travel>-agencyid
*                              severity = if_abap_behv_message=>severity-error
*                            ) ) TO reported-zr_travel_felix_d.
*          ENDIF.
*        ENDIF.
*      ELSE.
**        AUTHORITY-CHECK OBJECT '/DMO/TRVL'
**          ID '/DMO/CNTRY' DUMMY
**          ID 'ACTVT' FIELD '01'.
**        result = VALUE #( ( traveluuid = <fs_travel>-TravelUUID
**                              %create = COND #( WHEN sy-subrc = 0 THEN if_abap_behv=>auth-allowed ELSE if_abap_behv=>auth-unauthorized ) ) ).
*      ENDIF.
*    ENDLOOP.

  ENDMETHOD.

  METHOD precheck_create.
*  CHECK entities IS NOT INITIAL.
*
*    SELECT
*      FROM /dmo/a_travel_d AS a
*      INNER JOIN /dmo/agency AS b
*      ON a~agency_id = b~agency_id
*      FIELDS a~travel_uuid, a~agency_id, b~country_code
*      FOR ALL ENTRIES IN @entities
*      WHERE a~travel_uuid = @entities-TravelUUID
*      INTO TABLE @DATA(lt_agency_cntry).
*
*
*    LOOP AT entities ASSIGNING FIELD-SYMBOL(<fs_entity>).
*      READ TABLE lt_agency_cntry ASSIGNING FIELD-SYMBOL(<fs_agency_cntry>) WITH KEY travel_uuid = <fs_entity>-TravelUUID.
*      IF sy-subrc = 0.
*          AUTHORITY-CHECK OBJECT '/DMO/TRVL'
*              ID '/DMO/CNTRY' FIELD <fs_agency_cntry>-country_code
*              ID 'ACTVT' FIELD '01'.
*
*          APPEND VALUE #( %tky = <fs_entity>-%tky
*                          %create = COND #( WHEN sy-subrc = 0 THEN if_abap_behv=>auth-allowed ELSE if_abap_behv=>auth-unauthorized ) )
*                 TO failed-zr_travel_felix_d.
*
*          IF sy-subrc <> 0.
*            APPEND VALUE #( %tky = <fs_entity>-%tky
*                            %msg = NEW /dmo/cm_flight_messages(
*                              textid = /dmo/cm_flight_messages=>not_authorized_for_agencyid
*                              agency_id = <fs_entity>-agencyid
*                              severity = if_abap_behv_message=>severity-error
*                            ) ) TO reported-zr_travel_felix_d.
*          ENDIF.
*        ENDIF.
*    ENDLOOP.
  ENDMETHOD.

  METHOD precheck_update.
*    CHECK entities IS NOT INITIAL."在entities里，哪个字段被更新了，哪个字段才会被填充，没有被更新的字段，在entities里是空值
*
*    SELECT
*      FROM /dmo/a_travel_d AS a
*      INNER JOIN /dmo/agency AS b
*      ON a~agency_id = b~agency_id
*      FIELDS a~travel_uuid, a~agency_id, b~country_code
*      FOR ALL ENTRIES IN @entities
*      WHERE a~travel_uuid = @entities-TravelUUID
*      INTO TABLE @DATA(lt_agency_cntry).
*
*
*    LOOP AT entities ASSIGNING FIELD-SYMBOL(<fs_entity>).
*      READ TABLE lt_agency_cntry ASSIGNING FIELD-SYMBOL(<fs_agency_cntry>) WITH KEY travel_uuid = <fs_entity>-TravelUUID.
*      IF sy-subrc = 0.
*        AUTHORITY-CHECK OBJECT '/DMO/TRVL'
*            ID '/DMO/CNTRY' FIELD <fs_agency_cntry>-country_code
*            ID 'ACTVT' FIELD '02'.
*
*        APPEND VALUE #( %tky = <fs_entity>-%tky ) TO failed-zr_travel_felix_d.
*
*        IF sy-subrc <> 0.
*          APPEND VALUE #( %tky = <fs_entity>-%tky
*                          %msg = NEW /dmo/cm_flight_messages(
*                            textid = /dmo/cm_flight_messages=>not_authorized_for_agencyid
*                            agency_id = <fs_entity>-agencyid
*                            severity = if_abap_behv_message=>severity-error
*                          ) ) TO reported-zr_travel_felix_d.
*        ENDIF.
*      ENDIF.
*    ENDLOOP.
  ENDMETHOD.

  METHOD acceptTravel.

    MODIFY ENTITIES OF zr_travel_felix_d IN LOCAL MODE
      ENTITY zr_travel_felix_d
      UPDATE FIELDS ( OverallStatus )
      WITH VALUE #( FOR key IN keys ( %tky = key-%tky OverallStatus = 'A' ) ).

    READ ENTITIES OF zr_travel_felix_d IN LOCAL MODE
      ENTITY zr_travel_felix_d
      ALL FIELDS
      WITH CORRESPONDING #( keys )
      RESULT DATA(lt_travel_read).

    result = VALUE #( FOR ls_travel_read IN lt_travel_read ( %tky = ls_travel_read-%tky
                                                             %param = ls_travel_read ) ).
  ENDMETHOD.

  METHOD deductDiscount.
    DATA(lt_keys) = keys.
    LOOP AT lt_keys ASSIGNING FIELD-SYMBOL(<fs_key>) WHERE %param-discount <= 0 OR %param-discount > 100.
      APPEND VALUE #( %tky = <fs_key>-%tky ) TO failed-zr_travel_felix_d.
      APPEND VALUE #( %tky = <fs_key>-%tky
                      %msg = NEW /dmo/cm_flight_messages(
                               textid = /dmo/cm_flight_messages=>discount_invalid
                               severity = if_abap_behv_message=>severity-error
                             )
                      %element-bookingfee = if_abap_behv=>mk-on
                      %action-deductdiscount = if_abap_behv=>mk-on
       ) TO reported-zr_travel_felix_d.

      DELETE lt_keys.
    ENDLOOP.

    CHECK lt_keys IS NOT INITIAL.

    READ ENTITIES OF zr_travel_felix_d IN LOCAL MODE
      ENTITY zr_travel_felix_d
      FIELDS ( BookingFee )
      WITH CORRESPONDING #( lt_keys )
      RESULT DATA(lt_travel).

    DATA lt_travel_update TYPE TABLE FOR UPDATE zr_travel_felix_d.
    LOOP AT lt_travel ASSIGNING FIELD-SYMBOL(<fs_travel>).
      DATA(lv_discount) = lt_keys[ KEY id %tky = <fs_travel>-%tky ]-%param-discount.
      <fs_travel>-BookingFee = <fs_travel>-BookingFee * ( 100 - lv_discount ) / 100.
      APPEND VALUE #( %tky = <fs_travel>-%tky bookingfee = <fs_travel>-BookingFee ) TO lt_travel_update.
    ENDLOOP.

    MODIFY ENTITIES OF zr_travel_felix_d IN LOCAL MODE
      ENTITY zr_travel_felix_d
      UPDATE FIELDS ( BookingFee )
      WITH lt_travel_update.

    READ ENTITIES OF zr_travel_felix_d IN LOCAL MODE
      ENTITY zr_travel_felix_d
      ALL FIELDS
      WITH CORRESPONDING #( lt_keys )
      RESULT DATA(lt_travel_read).

    result = VALUE #( FOR ls_travel_read IN lt_travel_read ( %tky = ls_travel_read-%tky
                                                             %param = ls_travel_read ) ).
  ENDMETHOD.

  METHOD reCalcTotalPrice.
    TYPES: BEGIN OF ty_amount_per_currencycode,
             amount        TYPE /dmo/total_price,
             currency_code TYPE /dmo/currency_code,
           END OF ty_amount_per_currencycode.

    DATA: lt_amt_per_ccode TYPE STANDARD TABLE OF ty_amount_per_currencycode.

    " Read all relevant travel instances.
    READ ENTITIES OF zr_travel_felix_d IN LOCAL MODE
         ENTITY zr_travel_felix_d
            FIELDS ( BookingFee CurrencyCode )
            WITH CORRESPONDING #( keys )
         RESULT DATA(lt_travels).

    DELETE lt_travels WHERE CurrencyCode IS INITIAL.

    LOOP AT lt_travels ASSIGNING FIELD-SYMBOL(<travel>).
      " Set the start for the calculation by adding the booking fee.
      lt_amt_per_ccode = VALUE #( ( amount        = <travel>-BookingFee
                                    currency_code = <travel>-CurrencyCode ) ).

      " Read all associated bookings and add them to the total price.
      READ ENTITIES OF zr_travel_felix_d IN LOCAL MODE
        ENTITY zr_travel_felix_d BY \_Booking
          FIELDS ( FlightPrice CurrencyCode )
        WITH VALUE #( ( %tky = <travel>-%tky ) )
        RESULT DATA(lt_bookings).

      LOOP AT lt_bookings INTO DATA(booking) WHERE CurrencyCode IS NOT INITIAL.
        COLLECT VALUE ty_amount_per_currencycode( amount        = booking-FlightPrice
                                                  currency_code = booking-CurrencyCode ) INTO lt_amt_per_ccode.
      ENDLOOP.

      " Read all associated booking supplements and add them to the total price.
      READ ENTITIES OF zr_travel_felix_d IN LOCAL MODE
        ENTITY zr_booking_felix_d BY \_BookingSupplement
        FIELDS ( BookSupplPrice CurrencyCode )
        WITH VALUE #( FOR rba_booking IN lt_bookings ( %tky = rba_booking-%tky ) )
        RESULT DATA(lt_bookingsupplements).

      LOOP AT lt_bookingsupplements INTO DATA(bookingsupplement) WHERE CurrencyCode IS NOT INITIAL.
        COLLECT VALUE ty_amount_per_currencycode( amount        = bookingsupplement-BookSupplPrice
                                                  currency_code = bookingsupplement-CurrencyCode ) INTO lt_amt_per_ccode.
      ENDLOOP.

      CLEAR <travel>-TotalPrice.
      LOOP AT lt_amt_per_ccode INTO DATA(single_amount_per_currencycode).
        " If needed do a Currency Conversion
        IF single_amount_per_currencycode-currency_code = <travel>-CurrencyCode.
          <travel>-TotalPrice += single_amount_per_currencycode-amount.
        ELSE.
          /dmo/cl_flight_amdp=>convert_currency(
             EXPORTING
               iv_amount                   =  single_amount_per_currencycode-amount
               iv_currency_code_source     =  single_amount_per_currencycode-currency_code
               iv_currency_code_target     =  <travel>-CurrencyCode
               iv_exchange_rate_date       =  cl_abap_context_info=>get_system_date( )
             IMPORTING
               ev_amount                   = DATA(total_booking_price_per_curr)
            ).
          <travel>-TotalPrice += total_booking_price_per_curr.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    " write back the modified total_price of travels
    MODIFY ENTITIES OF zr_travel_felix_d IN LOCAL MODE
      ENTITY zr_travel_felix_d
      UPDATE FIELDS ( TotalPrice )
      WITH CORRESPONDING #( lt_travels ).

  ENDMETHOD.

  METHOD rejectTravel.
    MODIFY ENTITIES OF zr_travel_felix_d IN LOCAL MODE
      ENTITY zr_travel_felix_d
      UPDATE FIELDS ( OverallStatus )
      WITH VALUE #( FOR key IN keys ( %tky = key-%tky OverallStatus = 'X' ) ).

    READ ENTITIES OF zr_travel_felix_d IN LOCAL MODE
      ENTITY zr_travel_felix_d
      ALL FIELDS
      WITH CORRESPONDING #( keys )
      RESULT DATA(lt_travel_read).

    result = VALUE #( FOR ls_travel_read IN lt_travel_read ( %tky = ls_travel_read-%tky
                                                             %param = ls_travel_read ) ).
  ENDMETHOD.

  METHOD calcTotalPrice.
    MODIFY ENTITIES OF zr_travel_felix_d IN LOCAL MODE
      ENTITY zr_travel_felix_d
      EXECUTE reCalcTotalPrice
      FROM CORRESPONDING #( keys ).
  ENDMETHOD.

  METHOD setOverallStatus.

    MODIFY ENTITIES OF zr_travel_felix_d IN LOCAL MODE
      ENTITY zr_travel_felix_d
      UPDATE FIELDS ( OverallStatus )
      WITH VALUE #( FOR key IN keys ( %tky = key-%tky OverallStatus = 'O' ) ).

  ENDMETHOD.

  METHOD setTravelID.

    READ ENTITIES OF zr_travel_felix_d IN LOCAL MODE
      ENTITY zr_travel_felix_d
      FIELDS ( TravelID )
      WITH CORRESPONDING #( keys )
      RESULT DATA(lt_travel).

    DELETE lt_travel WHERE TravelID IS NOT INITIAL.

    CHECK lt_travel IS NOT INITIAL.

    SELECT
      FROM /dmo/a_travel_d
      FIELDS MAX( Travel_ID )
      INTO @DATA(lv_TravelID_max).

    MODIFY ENTITIES OF zr_travel_felix_d IN LOCAL MODE
      ENTITY zr_travel_felix_d
      UPDATE FIELDS ( TravelID )
      WITH VALUE #( FOR ls_travel IN lt_travel INDEX INTO lv_index ( %tky = ls_travel-%tky TravelID = lv_TravelID_max + lv_index ) ).

  ENDMETHOD.

  METHOD validateAgency.
    " Read relevant travel instance data
    READ ENTITIES OF zr_travel_felix_d IN LOCAL MODE
      ENTITY zr_travel_felix_d
      FIELDS ( AgencyID ) WITH CORRESPONDING #( keys )
      RESULT DATA(lt_travels).
    DATA lt_agencies TYPE SORTED TABLE OF /dmo/agency WITH UNIQUE KEY agency_id.

    " Optimization of DB select: extract distinct non-initial agency IDs
    lt_agencies = CORRESPONDING #( lt_travels DISCARDING DUPLICATES MAPPING agency_id = AgencyID EXCEPT * ).
    DELETE lt_agencies WHERE agency_id IS INITIAL.

    IF lt_agencies IS NOT INITIAL.
      " Check if agency ID exist
      SELECT FROM /dmo/agency FIELDS agency_id
        FOR ALL ENTRIES IN @lt_agencies
        WHERE agency_id = @lt_agencies-agency_id
        INTO TABLE @DATA(lt_agencies_db).
    ENDIF.
    " Raise msg for non existing and initial agencyID
    LOOP AT lt_travels INTO DATA(ls_travel).
      " Clear state messages that might exist
      APPEND VALUE #(  %tky               = ls_travel-%tky
                       %state_area        = 'VALIDATE_AGENCY' )
        TO reported-zr_travel_felix_d.

      IF ls_travel-AgencyID IS INITIAL.
        APPEND VALUE #( %tky = ls_travel-%tky ) TO failed-zr_travel_felix_d.

        APPEND VALUE #( %tky        = ls_travel-%tky
                        %state_area = 'VALIDATE_AGENCY'
                        %msg        = NEW /dmo/cm_flight_messages(
                                          severity = if_abap_behv_message=>severity-error
                                          textid   = /dmo/cm_flight_messages=>enter_agency_id )
                        %element-AgencyID = if_abap_behv=>mk-on )
          TO reported-zr_travel_felix_d.
      ELSEIF NOT line_exists( lt_agencies_db[ agency_id = ls_travel-AgencyID ] ).
        APPEND VALUE #( %tky = ls_travel-%tky ) TO failed-zr_travel_felix_d.

        APPEND VALUE #( %tky        = ls_travel-%tky
                        %state_area = 'VALIDATE_AGENCY'
                        %msg        = NEW /dmo/cm_flight_messages(
                                          severity = if_abap_behv_message=>severity-error
                                          textid   = /dmo/cm_flight_messages=>agency_unkown
                                          agency_id = ls_travel-AgencyID )
                        %element-AgencyID = if_abap_behv=>mk-on )
          TO reported-zr_travel_felix_d.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD validateCustomer.
    " Read relevant travel instance data
    READ ENTITIES OF zr_travel_felix_d IN LOCAL MODE
      ENTITY zr_travel_felix_d
      FIELDS ( CustomerID )
      WITH CORRESPONDING #( keys )
      RESULT DATA(lt_travels).

    DATA lt_customers TYPE SORTED TABLE OF /dmo/customer WITH UNIQUE KEY customer_id.

    " Optimization of DB select: extract distinct non-initial customer IDs
    lt_customers = CORRESPONDING #( lt_travels DISCARDING DUPLICATES MAPPING customer_id = CustomerID EXCEPT * ).
    DELETE lt_customers WHERE customer_id IS INITIAL.
    IF lt_customers IS NOT INITIAL.
      " Check if customer ID exist
      SELECT
        FROM /dmo/customer
        FIELDS customer_id
        FOR ALL ENTRIES IN @lt_customers
        WHERE customer_id = @lt_customers-customer_id
        INTO TABLE @DATA(lt_customers_db).
    ENDIF.

    " Raise msg for non existing and initial customerID
    LOOP AT lt_travels INTO DATA(ls_travels).
      " Clear state messages that might exist
      APPEND VALUE #(  %tky        = ls_travels-%tky
                       %state_area = 'VALIDATE_CUSTOMER' )
        TO reported-zr_travel_felix_d.

      IF ls_travels-CustomerID IS INITIAL.
        APPEND VALUE #(  %tky = ls_travels-%tky ) TO failed-zr_travel_felix_d.

        APPEND VALUE #(  %tky        = ls_travels-%tky
                         %state_area = 'VALIDATE_CUSTOMER'
                         %msg        = NEW /dmo/cm_flight_messages(
                                           severity   = if_abap_behv_message=>severity-error
                                           textid     = /dmo/cm_flight_messages=>enter_customer_id )
                         %element-CustomerID = if_abap_behv=>mk-on )
          TO reported-zr_travel_felix_d.
      ELSEIF NOT line_exists( lt_customers_db[ customer_id = ls_travels-CustomerID ] ).
        APPEND VALUE #( %tky = ls_travels-%tky ) TO failed-zr_travel_felix_d.

        APPEND VALUE #( %tky                = ls_travels-%tky
                        %state_area         = 'VALIDATE_CUSTOMER'
                        %msg                = NEW /dmo/cm_flight_messages(
                                                      customer_id = ls_travels-customerid
                                                      textid      = /dmo/cm_flight_messages=>customer_unkown
                                                      severity    = if_abap_behv_message=>severity-error )
                        %element-CustomerID = if_abap_behv=>mk-on )
          TO reported-zr_travel_felix_d.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD validateDates.
    " Read relevant travel instance data
    READ ENTITIES OF zr_travel_felix_d IN LOCAL MODE
      ENTITY zr_travel_felix_d
      FIELDS ( TravelID BeginDate EndDate )
      WITH CORRESPONDING #( keys )
      RESULT DATA(lt_travels).

    LOOP AT lt_travels INTO DATA(ls_travel).
      " Clear state messages that might exist
      APPEND VALUE #(  %tky        = ls_travel-%tky
                       %state_area = 'VALIDATE_DATES' )
        TO reported-zr_travel_felix_d.

      IF ls_travel-EndDate < ls_travel-BeginDate.
        APPEND VALUE #( %tky = ls_travel-%tky ) TO failed-zr_travel_felix_d.
        APPEND VALUE #( %tky               = ls_travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                        %msg               = NEW zcm_rag(
                                                 severity  = if_abap_behv_message=>severity-error
                                                 textid    = /dmo/cm_flight_messages=>begin_date_bef_end_date
                                                 begindate = ls_travel-BeginDate
                                                 enddate   = ls_travel-EndDate
                                                 travelid  = ls_travel-TravelID )
                        %element-BeginDate = if_abap_behv=>mk-on
                        %element-EndDate   = if_abap_behv=>mk-on ) TO reported-zr_travel_felix_d.

      ELSEIF ls_travel-BeginDate < cl_abap_context_info=>get_system_date( ).
        APPEND VALUE #( %tky               = ls_travel-%tky ) TO failed-zr_travel_felix_d.
        APPEND VALUE #( %tky               = ls_travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                        %msg               = NEW /dmo/cm_flight_messages(
                                                 severity  = if_abap_behv_message=>severity-error
                                                 textid    = /dmo/cm_flight_messages=>begin_date_on_or_bef_sysdate
                                                 begin_date = ls_travel-BeginDate )
                        %element-BeginDate = if_abap_behv=>mk-on ) TO reported-zr_travel_felix_d.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD Activate.
  ENDMETHOD.

  METHOD Discard.
  ENDMETHOD.

  METHOD Edit.
  ENDMETHOD.

  METHOD Resume.
  ENDMETHOD.

ENDCLASS.